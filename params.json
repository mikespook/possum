{"name":"Possum","tagline":"A micro web library for Go.","body":"Possum\r\n======\r\n\r\n[![Build Status][travis-img]][travis]\r\n[![GoDoc][godoc-img]][godoc]\r\n\r\nPossum is a micro web library for Go.\r\n\r\nIt has following modules:\r\n\r\n * Routers\r\n * Views\r\n * Session\r\n * Helpers\r\n\r\nInstall\r\n=======\r\n\r\nInstall the package:\r\n\r\n```bash\r\ngo get github.com/mikespook/possum\r\n```\r\n\r\nUsage\r\n=====\r\n\r\nImporting the package and sub-packages:\r\n\r\n```go\r\nimport (\r\n\t\"github.com/mikespook/possum\"\r\n\t\"github.com/mikespook/possum/router\"\r\n\t\"github.com/mikespook/possum/view\"\r\n)\r\n```\r\n\r\nPossum uses `Context` for passing data, handling request and rendering response.\r\n\r\nThis is how to create a new server mux for Possum:\r\n\r\n```go\r\nmux := possum.NewServerMux()\r\n```\r\n\r\nAnd assign a customized error handler:\r\n\r\n```go\r\nmux.ErrorHandle = func(err error) {\r\n\tfmt.Println(err)\r\n}\r\n```\r\n\r\n`PreRequest` and `PostResponse` are useful for pre-checking or customizing logs:\r\n\r\n```go\r\nmux.PreRequest = func(ctx *possum.Context) error {\r\n\thost, port, err := net.SplitHostPort(ctx.Request.RemoteAddr)\r\n\tif err != nil {\r\n\t\treturn err\r\n\t}\r\n\tif host != \"127.0.0.1\" {\r\n\t\treturn possum.NewError(http.StatusForbidden, \"Localhost only\")\r\n\t}\r\n\treturn nil\r\n}\r\n\r\nmux.PostResponse = func(ctx *possum.Context) error {\r\n\tfmt.Printf(\"[%d] %s:%s \\\"%s\\\"\", ctx.Response.Status,\r\n\t\tctx.Request.RemoteAddr,\tctx.Request.Method,\r\n\t\tctx.Request.URL.String())\t\t\r\n}\r\n```\r\n\r\nA specific path can bind to a different combination of routers, handlers and views:\r\n\r\n```go\r\nf := session.NewFactory(session.CookieStorage('session-id', nil))\r\n\r\nfunc helloword(ctx *Context) error {\r\n\tctx.StartSession(f)\r\n\treturn nil\r\n}\r\n\r\nmux.HandlerFunc(router.Simple(\"/json\"), helloword, view.Json(view.CharSetUTF8))\r\n\r\nif err := view.InitHtmlTemplates(\"*.html\"); err != nil {\r\n\treturn\r\n}\r\nmux.HandleFunc(router.Wildcard(\"/html/*/*\"),\r\n\thelloworld, view.Html(\"base.html\", \"utf-8\"))\r\n\r\nif err := view.InitWatcher(\"*.html\", view.InitTextTemplates, nil);\r\n\terr != nil {\r\n\treturn\r\n}\r\nmux.HandleFunc(router.RegEx(\"/html/(.*)/[a-z]\"),\r\n\thelloworld, view.Text(\"base.html\", \"utf-8\"))\r\n\r\nmux.HandleFunc(router.Colon(\"/:img/:id\"), \r\n\tnil, view.File(\"img.jpg\", \"image/jpeg\"))\r\n```\r\n\r\nAlso, a PProf methods can be initialized by `mux.InitPProf`:\r\n\r\n```go\r\nmux.InitPProf(\"/_pprof\")\r\n```\r\n\r\nIt will serve profiles and debug informations through `http://ip:port/_pprof`.\r\n\r\nE.g.:\r\n\r\n![][pprof]\r\n\r\nAnd finally, it is a standard way for listening and serving:\r\n\r\n```go\r\nhttp.ListenAndServe(\":8080\", mux)\r\n```\r\n\r\nFor more details, please see the [demo][demo].\r\n\r\nContributors\r\n============\r\n\r\n(_Alphabetic order_)\r\n \r\n * [Xing Xing][blog] <mikespook@gmail.com> [@Twitter][twitter]\r\n\r\nOpen Source - MIT Software License\r\n==================================\r\n\r\nSee LICENSE.\r\n\r\n [travis-img]: https://travis-ci.org/mikespook/possum.png?branch=master\r\n [travis]: https://travis-ci.org/mikespook/possum\r\n [blog]: http://mikespook.com\r\n [twitter]: http://twitter.com/mikespook\r\n [godoc-img]: https://godoc.org/github.com/mikespook/gorbac?status.png\r\n [godoc]: https://godoc.org/github.com/mikespook/possum\r\n [demo]: https://github.com/mikespook/possum/tree/master/demo\r\n [pprof]: https://pbs.twimg.com/media/CE4k3SIUMAAZiLy.png\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}